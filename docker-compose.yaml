networks:
  mnestix-network:
    driver: bridge
    name: mnestix-network

volumes:
  mnestix-database:

services:
  rabbitmq-broker:
    image: rabbitmq:management
    container_name: rabbitmq-broker
    ports:
     - "1883:1883"  # MQTT Port
     - "15672:15672"  # Management UI
    networks:
      - mnestix-network
    restart: always
    entrypoint:
    - bash
    - -c
    - |
     rabbitmq-plugins enable --offline rabbitmq_mqtt &&
     exec docker-entrypoint.sh rabbitmq-server
  node-red:
    image: nodered/node-red:latest
    container_name: node-red
    ports:
      - "1880:1880"
    volumes:
      - ./node-red-data:/data  # Hier k√∂nnen vorgefertigte Flows gespeichert werden    
    networks:
      - mnestix-network
    depends_on:
      - rabbitmq-broker
    restart: always    
    entrypoint:
    - bash
    - -c
    - |
     npm install node-red-dashboard &&
     node-red
  mnestix-browser:
    container_name: mnestix-browser
    image: mnestix/mnestix-browser:oi4-pcn-showcase
    ports:
      - '3000:3000'
    environment:
      REGISTRY_API_URL: 'https://registry.dpp40-2-v2.industrialdigitaltwin.org/'
      #SUBMODEL_REGISTRY_API_URL: 'http://submodel-registry:8084'
      #DISCOVERY_API_URL: 'http://mnestix-api:5064/discovery'
      AAS_REPO_API_URL: 'http://mnestix-api:5064/repo'
      SUBMODEL_REPO_API_URL: 'http://mnestix-api:5064/repo'
      MNESTIX_BACKEND_API_URL: 'http://mnestix-api:5064'
      MNESTIX_BACKEND_API_KEY: ${MNESTIX_BACKEND_API_KEY:-verySecureApiKey}
      AAS_LIST_FEATURE_FLAG: "true"
      TRANSFER_FEATURE_FLAG: "false"
      COMPARISON_FEATURE_FLAG: "false"
      AUTHENTICATION_FEATURE_FLAG: "false"
      LOCK_TIMESERIES_PERIOD_FEATURE_FLAG: "true"
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-verySecureNextAuthSecret}
      IMPRINT_URL: ""
      DATA_PRIVACY_URL: ""
    depends_on:
      aas-environment:
        condition: service_healthy # only after the healthcheck in aas is successful, the mnestix container is being created
    networks:
      - mnestix-network
    volumes:
      - mnestix-database:/app/prisma/database

  mnestix-api:
    image: mnestix/mnestix-api:1.3.0
    container_name: mnestix-api
    ports:
      - '5064:5064'
    environment:
      # API key authorization
      #CustomerEndpointsSecurity__ApiKey: 
      # Connection to Repository Service:
      ReverseProxy__Clusters__aasRepoCluster__Destinations__destination1__Address: 'http://aas-environment:8081/'
      ReverseProxy__Clusters__submodelRepoCluster__Destinations__destination1__Address: 'http://aas-environment:8081/'
      ReverseProxy__Clusters__discoveryCluster__Destinations__destination1__Address: 'http://aas-discovery:8081/'
      # Features Configuration
      Features__AasRegistryMiddleware: "true"
      Features__UseMongoDbBasedAasIdStorage: "true"
      Features__AllowRetrievingAllShellsAndSubmodels: "true"
      Features__UseAuthentication: "false"
      # InfluxDB Configuration
      # URL to specify the host and port where InfluxDB is running:
      ReverseProxy__Clusters__influxCluster__Destinations__destination1__Address: 'http://example/'
      # Token:
      ReverseProxy__Routes__InfluxRoute__Transforms__1__Set: 'Token '
      # MongoDB Configuration
      BasyxDbConnectionConfiguration__MongoConnectionString: 'mongodb://mongoAdmin:mongoPassword@mongodb:27017/?authSource=admin'
      BasyxDbConnectionConfiguration__DatabaseName: basyxdb
      BasyxDbConnectionConfiguration__AasCollectionName: 'aas-repo'
      # ASP.NET Core URLs
      ASPNETCORE_URLS: 'http://+:5064'
    depends_on:
      aas-environment:
        condition: service_healthy # only after the healthcheck in aas is successful, the mnestix container is being created
    logging:
      driver: 'json-file'
      options:
        max-file: '5'
        max-size: '100m'
    networks:
      - mnestix-network

  mongodb:
    image: mongo:5
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongoAdmin
      MONGO_INITDB_ROOT_PASSWORD: mongoPassword
    # Set health checks to wait until mongo has started
    healthcheck:
      test: echo "db.runCommand("ping").ok" | mongosh mongodb:27017/test --quiet
      interval: 3s
      timeout: 3s
      retries: 5
    logging:
      driver: 'json-file'
      options:
        max-file: '5'
        max-size: '100m'
    networks:
      - mnestix-network

  aas-environment:
    image: eclipsebasyx/aas-environment:2.0.0-milestone-03.1
    container_name: aas-environment
    ports:
      - '8081:8081'
    depends_on:
      - mongodb
    environment:
      # MongoDb configuration for Basyx Repository
      BASYX__BACKEND: MongoDB
      SPRING__DATA__MONGODB__HOST: mongodb
      SPRING__DATA__MONGODB__DATABASE: basyxdb
      SPRING__DATA__MONGODB__authentication-database: admin
      SPRING__DATA__MONGODB__USERNAME: mongoAdmin
      SPRING__DATA__MONGODB__PASSWORD: mongoPassword
      SPRING_SERVLET_MULTIPART_MAX_FILE_SIZE: 100000KB
      SPRING_SERVLET_MULTIPART_MAX_REQUEST_SIZE: 100000KB
      # Allow mnestix frontend and backend to call basyx
      BASYX_CORS_ALLOWED-ORIGINS: '*'
      BASYX_CORS_ALLOWED-METHODS: GET,POST,PATCH,DELETE,PUT,OPTIONS,HEAD
    healthcheck: # check the endpoint for a valid response (service ready)
      test: curl -f http://localhost:8081/actuator/health
      interval: 30s
      timeout: 10s
      retries: 6
    logging:
      driver: 'json-file'
      options:
        max-file: '5'
        max-size: '100m'
    networks:
      - mnestix-network

  